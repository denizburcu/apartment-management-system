// <auto-generated />
using System;
using ApartmentManagement.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApartmentManagement.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ApartmentManagement.Core.Models.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApartmentNumber")
                        .HasColumnType("int");

                    b.Property<int>("BlockNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Apartment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApartmentNumber = 1,
                            BlockNumber = 4,
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3797),
                            Floor = 2,
                            Status = "FULL",
                            Type = "2+1",
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3797),
                            UserId = "02174cf0–9412–4cfe-afbf-53422d33cf6"
                        },
                        new
                        {
                            Id = 2,
                            ApartmentNumber = 3,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3800),
                            Floor = 7,
                            Status = "FULL",
                            Type = "1+1",
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3801),
                            UserId = "02174cf0–9412–4cfe-afbf-5fhdf6d33cf6"
                        },
                        new
                        {
                            Id = 3,
                            ApartmentNumber = 3,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3802),
                            Floor = 7,
                            Status = "FULL",
                            Type = "4+1",
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3802),
                            UserId = "02174cf0–9412–4cfe-afbf-591231sd6d33cf6"
                        },
                        new
                        {
                            Id = 4,
                            ApartmentNumber = 5,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3804),
                            Floor = 3,
                            Status = "FULL",
                            Type = "3+1",
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3805),
                            UserId = "02174cf0–9123xccfe-afbf-59f706d33cf6"
                        },
                        new
                        {
                            Id = 5,
                            ApartmentNumber = 5,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3806),
                            Floor = 3,
                            Status = "FULL",
                            Type = "2+1",
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3806),
                            UserId = "02174cf0–9cvbcds2-afbf-59f706d33cf6"
                        },
                        new
                        {
                            Id = 6,
                            ApartmentNumber = 7,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3808),
                            Floor = 3,
                            Status = "EMPTY",
                            Type = "5+1",
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3808),
                            UserId = "02174cf0–xcvds2e-afbf-59f706d33cf6"
                        },
                        new
                        {
                            Id = 7,
                            ApartmentNumber = 7,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3809),
                            Floor = 4,
                            Status = "EMPTY",
                            Type = "2+1",
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3810)
                        },
                        new
                        {
                            Id = 8,
                            ApartmentNumber = 8,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3811),
                            Floor = 4,
                            Status = "EMPTY",
                            Type = "2+1",
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3812)
                        },
                        new
                        {
                            Id = 9,
                            ApartmentNumber = 10,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3813),
                            Floor = 4,
                            Status = "EMPTY",
                            Type = "2+1",
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3813)
                        },
                        new
                        {
                            Id = 10,
                            ApartmentNumber = 10,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3815),
                            Floor = 6,
                            Status = "EMPTY",
                            Type = "4+1",
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3815)
                        },
                        new
                        {
                            Id = 11,
                            ApartmentNumber = 12,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3816),
                            Floor = 6,
                            Status = "EMPTY",
                            Type = "3+1",
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3817)
                        });
                });

            modelBuilder.Entity("ApartmentManagement.Core.Models.ApartmentCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<string>("CostType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.ToTable("ApartmentCost");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 250,
                            ApartmentId = 1,
                            CostType = "ELECTRICITY",
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3524),
                            IsPaid = false,
                            Month = 12,
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3533)
                        },
                        new
                        {
                            Id = 2,
                            Amount = 250,
                            ApartmentId = 1,
                            CostType = "WATER",
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3538),
                            IsPaid = false,
                            Month = 12,
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3539)
                        },
                        new
                        {
                            Id = 3,
                            Amount = 250,
                            ApartmentId = 1,
                            CostType = "GAS",
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3540),
                            IsPaid = false,
                            Month = 12,
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3541)
                        },
                        new
                        {
                            Id = 4,
                            Amount = 250,
                            ApartmentId = 2,
                            CostType = "ELECTRICITY",
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3542),
                            IsPaid = false,
                            Month = 9,
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3542)
                        },
                        new
                        {
                            Id = 5,
                            Amount = 250,
                            ApartmentId = 2,
                            CostType = "GAS",
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3544),
                            IsPaid = false,
                            Month = 10,
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3544)
                        },
                        new
                        {
                            Id = 6,
                            Amount = 250,
                            ApartmentId = 2,
                            CostType = "GAS",
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3545),
                            IsPaid = true,
                            Month = 9,
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3546)
                        },
                        new
                        {
                            Id = 7,
                            Amount = 250,
                            ApartmentId = 3,
                            CostType = "GAS",
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3547),
                            IsPaid = true,
                            Month = 9,
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3547)
                        },
                        new
                        {
                            Id = 8,
                            Amount = 250,
                            ApartmentId = 3,
                            CostType = "GAS",
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3549),
                            IsPaid = true,
                            Month = 9,
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3549)
                        },
                        new
                        {
                            Id = 9,
                            Amount = 333,
                            ApartmentId = 4,
                            CostType = "ELECTRICITY",
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3550),
                            IsPaid = true,
                            Month = 10,
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3551)
                        },
                        new
                        {
                            Id = 10,
                            Amount = 22,
                            ApartmentId = 4,
                            CostType = "WATER",
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3552),
                            IsPaid = true,
                            Month = 10,
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3552)
                        },
                        new
                        {
                            Id = 11,
                            Amount = 22,
                            ApartmentId = 1,
                            CostType = "WATER",
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3554),
                            IsPaid = true,
                            Month = 12,
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3554)
                        },
                        new
                        {
                            Id = 12,
                            Amount = 22,
                            ApartmentId = 1,
                            CostType = "GAS",
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3555),
                            IsPaid = true,
                            Month = 12,
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3556)
                        },
                        new
                        {
                            Id = 13,
                            Amount = 34,
                            ApartmentId = 1,
                            CostType = "ELECTRICITY",
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3557),
                            IsPaid = true,
                            Month = 9,
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(3558)
                        });
                });

            modelBuilder.Entity("ApartmentManagement.Core.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Message");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(4254),
                            Description = "Apartman temizlenmemiş",
                            Status = "NEW",
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(4256),
                            UserId = "02174cf0–9412–4cfe-afbf-53422d33cf6"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(4260),
                            Description = "Faturaları ödedim",
                            Status = "NEW",
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(4260),
                            UserId = "02174cf0–9412–4cfe-afbf-53422d33cf6"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(4262),
                            Description = "At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis",
                            Status = "NEW",
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(4264),
                            UserId = "02174cf0–9412–4cfe-afbf-5fhdf6d33cf6"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(4266),
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            Status = "NEW",
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(4267),
                            UserId = "02174cf0–9412–4cfe-afbf-5fhdf6d33cf6"
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(4269),
                            Description = " It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. ",
                            Status = "NEW",
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(4270),
                            UserId = "02174cf0–9412–4cfe-afbf-591231sd6d33cf6"
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(4272),
                            Description = "Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.",
                            Status = "NEW",
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(4273),
                            UserId = "02174cf0–9412–4cfe-afbf-591231sd6d33cf6"
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(4275),
                            Description = "Apartmanda kapıya ayakkabı bırakılmasın..",
                            Status = "NEW",
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(4276),
                            UserId = "02174cf0–9123xccfe-afbf-59f706d33cf6"
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(4277),
                            Description = "Aidatı ödedim",
                            Status = "NEW",
                            UpdatedTime = new DateTime(2022, 12, 18, 20, 30, 48, 725, DateTimeKind.Local).AddTicks(4278),
                            UserId = "02174cf0–xcvds2e-afbf-59f706d33cf6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "341743f0-asd2–42de-afbf-59kmkkmk72cf6",
                            ConcurrencyStamp = "341743f0-asd2–42de-afbf-59kmkkmk72cf6",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "34213123xxx0-asd2–42de-afas29k3X72cf6",
                            ConcurrencyStamp = "341743f0-asd2–42de-afbf-59kmkkmk72cf6",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "02174cf0–9412–4cfe-afbf-59f706d72cf6",
                            RoleId = "341743f0-asd2–42de-afbf-59kmkkmk72cf6"
                        },
                        new
                        {
                            UserId = "02174cf0–9412–4cfe-afbf-53422d33cf6",
                            RoleId = "34213123xxx0-asd2–42de-afas29k3X72cf6"
                        },
                        new
                        {
                            UserId = "02174cf0–9412–4cfe-afbf-5fhdf6d33cf6",
                            RoleId = "34213123xxx0-asd2–42de-afas29k3X72cf6"
                        },
                        new
                        {
                            UserId = "02174cf0–9412–4cfe-afbf-591231sd6d33cf6",
                            RoleId = "34213123xxx0-asd2–42de-afas29k3X72cf6"
                        },
                        new
                        {
                            UserId = "02174cf0–9123xccfe-afbf-59f706d33cf6",
                            RoleId = "34213123xxx0-asd2–42de-afas29k3X72cf6"
                        },
                        new
                        {
                            UserId = "02174cf0–9cvbcds2-afbf-59f706d33cf6",
                            RoleId = "34213123xxx0-asd2–42de-afas29k3X72cf6"
                        },
                        new
                        {
                            UserId = "02174cf0–xcvds2e-afbf-59f706d33cf6",
                            RoleId = "34213123xxx0-asd2–42de-afas29k3X72cf6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ApartmentManagement.Core.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "02174cf0–9412–4cfe-afbf-59f706d72cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "327fd33f-bf40-4d5e-bc42-288009b1000e",
                            Email = "admin@aps.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@APS.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEGzv6WaXo8JZdA50ieMlIp81BxCEQusPyPQ/FjaW7+5mRX3Gen9DLtfvWecYL6NGKA==",
                            PhoneNumber = "5453500023",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5e700a9d-c8e4-4252-93d6-0ade749c994f",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            IdentityNumber = "4556565623",
                            LastName = "Aydin",
                            Name = "Deniz",
                            PlateNumber = "34BOS45"
                        },
                        new
                        {
                            Id = "02174cf0–9412–4cfe-afbf-53422d33cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "957bd44f-b821-46f7-b924-80f804fe1e52",
                            Email = "luffytaro@aps.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LUFFYTARO@APS.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEHAeAxoJeb4hf+7xSeExxD1pkbqCl6RwFrnLHidKEKwpKiJ6Vq8gH3/e8nnL5R9izQ==",
                            PhoneNumber = "5453500023",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6e0128b0-d34d-4b43-893a-f8c9fea4f22a",
                            TwoFactorEnabled = false,
                            UserName = "user2",
                            IdentityNumber = "452256565623",
                            LastName = "AYDINORO",
                            Name = "LuffyTaro",
                            PlateNumber = "34BOS45"
                        },
                        new
                        {
                            Id = "02174cf0–9412–4cfe-afbf-5fhdf6d33cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a5ff1e8-e77c-495e-ae68-45616cd42941",
                            Email = "yokotoro@aps.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "YOKOTORO@APS.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAEAACcQAAAAENkU6Bi9gxzPBJ5gaONmbXgVIoF/ilis2989D0aKYot467wSvHeEN9MR/ThfIZdJwg==",
                            PhoneNumber = "5453500023",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "deabab7f-3cce-41ec-a57a-40254eb345e5",
                            TwoFactorEnabled = false,
                            UserName = "user3",
                            IdentityNumber = "452256565623",
                            LastName = "Baygın",
                            Name = "Yoko",
                            PlateNumber = "34BOS45"
                        },
                        new
                        {
                            Id = "02174cf0–9412–4cfe-afbf-591231sd6d33cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfd618dc-5ba2-46db-bd61-b6fe4ca776e1",
                            Email = "ahmet@aps.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMET@APS.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAEAACcQAAAAEO1xbMoh7XN2OiTP7oezWbUPhglYZaSKGcpJmv/NwjMQQ0cfnIIwcQsEQB1Mhwumog==",
                            PhoneNumber = "5453500023",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9a692ac6-ce27-4425-bc5a-381135775081",
                            TwoFactorEnabled = false,
                            UserName = "user4",
                            IdentityNumber = "452256565623",
                            LastName = "deli",
                            Name = "ahmet",
                            PlateNumber = "34BOS45"
                        },
                        new
                        {
                            Id = "02174cf0–9123xccfe-afbf-59f706d33cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bcc17ff9-6672-44e0-9a80-b1433bd836a0",
                            Email = "meltem@aps.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MELTEM@APS.COM",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAEAACcQAAAAEJnTQScQWsor0mpLYFRLXqy1RIQVA84RNaLLrKGPyy1uo+7EtFdOpx0F9cpzn/RDeg==",
                            PhoneNumber = "5453500023",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "26e21bc3-d6bd-4803-a91b-ad20886322c9",
                            TwoFactorEnabled = false,
                            UserName = "user5",
                            IdentityNumber = "452256565623",
                            LastName = "cumbuş",
                            Name = "meltem",
                            PlateNumber = "34BOS45"
                        },
                        new
                        {
                            Id = "02174cf0–9cvbcds2-afbf-59f706d33cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "47a07919-e4d9-4b31-b9b5-9778331c9f8b",
                            Email = "akin@aps.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AKIN@APS.COM",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAEAACcQAAAAEHA2LE0mXqEu/EpHBgKoq/racaHTO0zgXrPwbCcbS8UmyYI63atyy/fLdndcQuPuqQ==",
                            PhoneNumber = "5453500023",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "25e6dd4c-f1c4-418b-998b-cf4a16506b62",
                            TwoFactorEnabled = false,
                            UserName = "user6",
                            IdentityNumber = "452256565623",
                            LastName = "Akmaz",
                            Name = "Akin",
                            PlateNumber = "34BOS45"
                        },
                        new
                        {
                            Id = "02174cf0–xcvds2e-afbf-59f706d33cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ab4e0186-1612-4f79-bc33-074204d4e97a",
                            Email = "mori@aps.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MORI@APS.COM",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAEAACcQAAAAELgDemFLuEEOirEr+FZ+QjEn8kdHzB9V3NqMggqPepgho4hhU64W1bJAqbz3Ai0ETw==",
                            PhoneNumber = "5453500023",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "74fa048f-d62a-42e7-8eee-bccdcf98e5e0",
                            TwoFactorEnabled = false,
                            UserName = "user7",
                            IdentityNumber = "452256565623",
                            LastName = "Morar",
                            Name = "Mori",
                            PlateNumber = "34BOS45"
                        });
                });

            modelBuilder.Entity("ApartmentManagement.Core.Models.Apartment", b =>
                {
                    b.HasOne("ApartmentManagement.Core.Models.User", "User")
                        .WithOne("Apartment")
                        .HasForeignKey("ApartmentManagement.Core.Models.Apartment", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApartmentManagement.Core.Models.ApartmentCost", b =>
                {
                    b.HasOne("ApartmentManagement.Core.Models.Apartment", "Apartment")
                        .WithMany("ApartmentCosts")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("ApartmentManagement.Core.Models.Message", b =>
                {
                    b.HasOne("ApartmentManagement.Core.Models.User", "User")
                        .WithMany("Message")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApartmentManagement.Core.Models.Apartment", b =>
                {
                    b.Navigation("ApartmentCosts");
                });

            modelBuilder.Entity("ApartmentManagement.Core.Models.User", b =>
                {
                    b.Navigation("Apartment")
                        .IsRequired();

                    b.Navigation("Message");
                });
#pragma warning restore 612, 618
        }
    }
}
