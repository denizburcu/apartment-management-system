// <auto-generated />
using System;
using ApartmentManagement.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApartmentManagement.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221218150144_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ApartmentManagement.Core.Models.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApartmentNumber")
                        .HasColumnType("int");

                    b.Property<int>("BlockNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Apartment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApartmentNumber = 1,
                            BlockNumber = 4,
                            CreatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4860),
                            Floor = 2,
                            Status = "FULL",
                            Type = "2+1",
                            UpdatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4861),
                            UserId = "02174cf0–9412–4cfe-afbf-53422d33cf6"
                        },
                        new
                        {
                            Id = 2,
                            ApartmentNumber = 3,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4864),
                            Floor = 7,
                            Status = "FULL",
                            Type = "1+1",
                            UpdatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4865),
                            UserId = "02174cf0–9412–4cfe-afbf-5fhdf6d33cf6"
                        },
                        new
                        {
                            Id = 3,
                            ApartmentNumber = 3,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4867),
                            Floor = 7,
                            Status = "FULL",
                            Type = "4+1",
                            UpdatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4867),
                            UserId = "02174cf0–9412–4cfe-afbf-591231sd6d33cf6"
                        },
                        new
                        {
                            Id = 4,
                            ApartmentNumber = 5,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4869),
                            Floor = 3,
                            Status = "FULL",
                            Type = "3+1",
                            UpdatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4869),
                            UserId = "02174cf0–9123xccfe-afbf-59f706d33cf6"
                        },
                        new
                        {
                            Id = 5,
                            ApartmentNumber = 5,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4871),
                            Floor = 3,
                            Status = "FULL",
                            Type = "2+1",
                            UpdatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4872),
                            UserId = "02174cf0–9cvbcds2-afbf-59f706d33cf6"
                        },
                        new
                        {
                            Id = 6,
                            ApartmentNumber = 7,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4873),
                            Floor = 3,
                            Status = "EMPTY",
                            Type = "5+1",
                            UpdatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4874),
                            UserId = "02174cf0–xcvds2e-afbf-59f706d33cf6"
                        },
                        new
                        {
                            Id = 7,
                            ApartmentNumber = 7,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4876),
                            Floor = 4,
                            Status = "EMPTY",
                            Type = "2+1",
                            UpdatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4876)
                        },
                        new
                        {
                            Id = 8,
                            ApartmentNumber = 8,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4878),
                            Floor = 4,
                            Status = "EMPTY",
                            Type = "2+1",
                            UpdatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4878)
                        },
                        new
                        {
                            Id = 9,
                            ApartmentNumber = 10,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4880),
                            Floor = 4,
                            Status = "EMPTY",
                            Type = "2+1",
                            UpdatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4880)
                        },
                        new
                        {
                            Id = 10,
                            ApartmentNumber = 10,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4882),
                            Floor = 6,
                            Status = "EMPTY",
                            Type = "4+1",
                            UpdatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4883)
                        },
                        new
                        {
                            Id = 11,
                            ApartmentNumber = 12,
                            BlockNumber = 5,
                            CreatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4884),
                            Floor = 6,
                            Status = "EMPTY",
                            Type = "3+1",
                            UpdatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4885)
                        });
                });

            modelBuilder.Entity("ApartmentManagement.Core.Models.ApartmentCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<string>("CostType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.ToTable("ApartmentCost");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 250,
                            ApartmentId = 1,
                            CostType = "ELECTRICITY",
                            CreatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4571),
                            IsPaid = false,
                            Month = 12,
                            UpdatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4580)
                        },
                        new
                        {
                            Id = 2,
                            Amount = 250,
                            ApartmentId = 1,
                            CostType = "WATER",
                            CreatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4586),
                            IsPaid = false,
                            Month = 12,
                            UpdatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4587)
                        },
                        new
                        {
                            Id = 3,
                            Amount = 250,
                            ApartmentId = 1,
                            CostType = "GAS",
                            CreatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4588),
                            IsPaid = false,
                            Month = 12,
                            UpdatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4589)
                        },
                        new
                        {
                            Id = 4,
                            Amount = 250,
                            ApartmentId = 2,
                            CostType = "ELECTRICITY",
                            CreatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4590),
                            IsPaid = false,
                            Month = 9,
                            UpdatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4591)
                        },
                        new
                        {
                            Id = 5,
                            Amount = 250,
                            ApartmentId = 2,
                            CostType = "GAS",
                            CreatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4592),
                            IsPaid = false,
                            Month = 10,
                            UpdatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4593)
                        },
                        new
                        {
                            Id = 6,
                            Amount = 250,
                            ApartmentId = 2,
                            CostType = "GAS",
                            CreatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4594),
                            IsPaid = true,
                            Month = 9,
                            UpdatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4595)
                        },
                        new
                        {
                            Id = 7,
                            Amount = 250,
                            ApartmentId = 3,
                            CostType = "GAS",
                            CreatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4597),
                            IsPaid = true,
                            Month = 9,
                            UpdatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4597)
                        },
                        new
                        {
                            Id = 8,
                            Amount = 250,
                            ApartmentId = 3,
                            CostType = "GAS",
                            CreatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4599),
                            IsPaid = true,
                            Month = 9,
                            UpdatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(4599)
                        });
                });

            modelBuilder.Entity("ApartmentManagement.Core.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Message");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(5194),
                            Description = "Apartman temizlenmemiş",
                            Status = "NEW",
                            UpdatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(5196),
                            UserId = "02174cf0–9412–4cfe-afbf-53422d33cf6"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(5199),
                            Description = "Faturaları ödedim",
                            Status = "NEW",
                            UpdatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(5200),
                            UserId = "02174cf0–9412–4cfe-afbf-53422d33cf6"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(5201),
                            Description = "At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis",
                            Status = "NEW",
                            UpdatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(5202),
                            UserId = "02174cf0–9412–4cfe-afbf-5fhdf6d33cf6"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(5203),
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            Status = "NEW",
                            UpdatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(5204),
                            UserId = "02174cf0–9412–4cfe-afbf-5fhdf6d33cf6"
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(5206),
                            Description = " It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. ",
                            Status = "NEW",
                            UpdatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(5206),
                            UserId = "02174cf0–9412–4cfe-afbf-591231sd6d33cf6"
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(5207),
                            Description = "Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.",
                            Status = "NEW",
                            UpdatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(5208),
                            UserId = "02174cf0–9412–4cfe-afbf-591231sd6d33cf6"
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(5209),
                            Description = "Apartmanda kapıya ayakkabı bırakılmasın..",
                            Status = "NEW",
                            UpdatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(5210),
                            UserId = "02174cf0–9123xccfe-afbf-59f706d33cf6"
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(5211),
                            Description = "Aidatı ödedim",
                            Status = "NEW",
                            UpdatedTime = new DateTime(2022, 12, 18, 18, 1, 43, 672, DateTimeKind.Local).AddTicks(5212),
                            UserId = "02174cf0–xcvds2e-afbf-59f706d33cf6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "341743f0-asd2–42de-afbf-59kmkkmk72cf6",
                            ConcurrencyStamp = "341743f0-asd2–42de-afbf-59kmkkmk72cf6",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "34213123xxx0-asd2–42de-afas29k3X72cf6",
                            ConcurrencyStamp = "341743f0-asd2–42de-afbf-59kmkkmk72cf6",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "02174cf0–9412–4cfe-afbf-59f706d72cf6",
                            RoleId = "341743f0-asd2–42de-afbf-59kmkkmk72cf6"
                        },
                        new
                        {
                            UserId = "02174cf0–9412–4cfe-afbf-53422d33cf6",
                            RoleId = "34213123xxx0-asd2–42de-afas29k3X72cf6"
                        },
                        new
                        {
                            UserId = "02174cf0–9412–4cfe-afbf-5fhdf6d33cf6",
                            RoleId = "34213123xxx0-asd2–42de-afas29k3X72cf6"
                        },
                        new
                        {
                            UserId = "02174cf0–9412–4cfe-afbf-591231sd6d33cf6",
                            RoleId = "34213123xxx0-asd2–42de-afas29k3X72cf6"
                        },
                        new
                        {
                            UserId = "02174cf0–9123xccfe-afbf-59f706d33cf6",
                            RoleId = "34213123xxx0-asd2–42de-afas29k3X72cf6"
                        },
                        new
                        {
                            UserId = "02174cf0–9cvbcds2-afbf-59f706d33cf6",
                            RoleId = "34213123xxx0-asd2–42de-afas29k3X72cf6"
                        },
                        new
                        {
                            UserId = "02174cf0–xcvds2e-afbf-59f706d33cf6",
                            RoleId = "34213123xxx0-asd2–42de-afas29k3X72cf6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ApartmentManagement.Core.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "02174cf0–9412–4cfe-afbf-59f706d72cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f030e844-f18f-4b4d-ae38-d2ed558ec38e",
                            Email = "admin@aps.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@APS.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEL5eSuWxdCaISccI9NJLFPs3cQyukhERn5DASVMtxtPFvB1wnkc8dzl037KrjAtRPg==",
                            PhoneNumber = "5453500023",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f0c1a7f-2dfe-4f14-8a10-f3fbf434921c",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            IdentityNumber = "4556565623",
                            LastName = "Aydin",
                            Name = "Deniz",
                            PlateNumber = "34BOS45"
                        },
                        new
                        {
                            Id = "02174cf0–9412–4cfe-afbf-53422d33cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9ce0879c-b618-4c7a-ae6c-e892400a9dff",
                            Email = "luffytaro@aps.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LUFFYTARO@APS.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEHuLtDtp4GoP1+inZQKcCLRJBcgl0NxxUcRyUETzw+WLoCRcJijpkfZYNCQsslHvkQ==",
                            PhoneNumber = "5453500023",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ba3a13d-f57c-4a94-9bbd-f4ab36a6e428",
                            TwoFactorEnabled = false,
                            UserName = "user2",
                            IdentityNumber = "452256565623",
                            LastName = "AYDINORO",
                            Name = "LuffyTaro",
                            PlateNumber = "34BOS45"
                        },
                        new
                        {
                            Id = "02174cf0–9412–4cfe-afbf-5fhdf6d33cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "49948cfd-99f0-4e0d-84ea-53acaa83c19f",
                            Email = "yokotoro@aps.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "YOKOTORO@APS.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAEAACcQAAAAEDPt1rl6kC4MIkN+wbIFLZIGqxVqY5SG7+Cf0YTUVPyuwC4ehKgdrTFK19L5pZetZA==",
                            PhoneNumber = "5453500023",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "95e7de43-c800-472b-9c0b-859f6aa4c131",
                            TwoFactorEnabled = false,
                            UserName = "user3",
                            IdentityNumber = "452256565623",
                            LastName = "Baygın",
                            Name = "Yoko",
                            PlateNumber = "34BOS45"
                        },
                        new
                        {
                            Id = "02174cf0–9412–4cfe-afbf-591231sd6d33cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "64ebdb1c-c23c-4102-9c54-a354f8818a38",
                            Email = "ahmet@aps.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMET@APS.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAEAACcQAAAAENSr7aA+1psg54F61rjL/5UweqtsLSTKSU5hXLGeAWMPAAU/vl0RYKmW3a+nsvTt/A==",
                            PhoneNumber = "5453500023",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ec7145f4-4fa7-4d3e-b5d8-f07db0bf2135",
                            TwoFactorEnabled = false,
                            UserName = "user4",
                            IdentityNumber = "452256565623",
                            LastName = "deli",
                            Name = "ahmet",
                            PlateNumber = "34BOS45"
                        },
                        new
                        {
                            Id = "02174cf0–9123xccfe-afbf-59f706d33cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a151ee57-f6de-4ef5-98a0-faaff33ff077",
                            Email = "meltem@aps.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MELTEM@APS.COM",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAEAACcQAAAAEAeZh6EsXgOoz2QOT4hqGMhArqwwZzy8Y2+vP5i+fdvrA4VZafM6rSsStmCH0Yv/vA==",
                            PhoneNumber = "5453500023",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "af3c5a73-e1da-4ee5-822b-4b4012d20ba5",
                            TwoFactorEnabled = false,
                            UserName = "user5",
                            IdentityNumber = "452256565623",
                            LastName = "cumbuş",
                            Name = "meltem",
                            PlateNumber = "34BOS45"
                        },
                        new
                        {
                            Id = "02174cf0–9cvbcds2-afbf-59f706d33cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ae4bba6e-c550-415e-a876-fc30ef1452d9",
                            Email = "akin@aps.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AKIN@APS.COM",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAEAACcQAAAAENUKydDcLEg70KPvevzcdoarNg88LFvTp0RncxiCllO4+JeOM/KQV+6k3k+YTdkyOg==",
                            PhoneNumber = "5453500023",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd58e365-b091-42d2-a0b5-5bdfedfba56a",
                            TwoFactorEnabled = false,
                            UserName = "user6",
                            IdentityNumber = "452256565623",
                            LastName = "Akmaz",
                            Name = "Akin",
                            PlateNumber = "34BOS45"
                        },
                        new
                        {
                            Id = "02174cf0–xcvds2e-afbf-59f706d33cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9306ded7-c5f7-4fdd-8f1a-c687050d5976",
                            Email = "mori@aps.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MORI@APS.COM",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAEAACcQAAAAEBF7NcoamgFW+0j9aQP7w/TXoyCKXF8J1abA0qyT8TjUZD/D2hQn/ZwDlHnv4Od5Rw==",
                            PhoneNumber = "5453500023",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "78d189aa-d946-4ed0-99f4-81a02274013b",
                            TwoFactorEnabled = false,
                            UserName = "user7",
                            IdentityNumber = "452256565623",
                            LastName = "Morar",
                            Name = "Mori",
                            PlateNumber = "34BOS45"
                        });
                });

            modelBuilder.Entity("ApartmentManagement.Core.Models.Apartment", b =>
                {
                    b.HasOne("ApartmentManagement.Core.Models.User", "User")
                        .WithOne("Apartment")
                        .HasForeignKey("ApartmentManagement.Core.Models.Apartment", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApartmentManagement.Core.Models.ApartmentCost", b =>
                {
                    b.HasOne("ApartmentManagement.Core.Models.Apartment", "Apartment")
                        .WithMany("ApartmentCosts")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("ApartmentManagement.Core.Models.Message", b =>
                {
                    b.HasOne("ApartmentManagement.Core.Models.User", "User")
                        .WithMany("Message")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApartmentManagement.Core.Models.Apartment", b =>
                {
                    b.Navigation("ApartmentCosts");
                });

            modelBuilder.Entity("ApartmentManagement.Core.Models.User", b =>
                {
                    b.Navigation("Apartment")
                        .IsRequired();

                    b.Navigation("Message");
                });
#pragma warning restore 612, 618
        }
    }
}
